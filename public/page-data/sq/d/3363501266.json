{"data":{"allContentfulPost":{"edges":[{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"In this post, I would like to turn the spotlight again to the power of self-contained application:\n\n[**My take on the self-contained application**  \n*This is the only sentence here that contains the word microservice.*medium.com](https://medium.com/@zsim0n/my-take-on-the-self-contained-application-44f6bfc8acb0 \"https://medium.com/@zsim0n/my-take-on-the-self-contained-application-44f6bfc8acb0\")[](https://medium.com/@zsim0n/my-take-on-the-self-contained-application-44f6bfc8acb0)\n\nAs you can see there, the platform and infrastructure manifest is part of the code repository.\n\n    infrastructure.manifest    # my.infrastucture  \n    platform.manifest          # my.platform\n\nA more practical example could be like this:\n\n    package.json         # npm platform  \n    Gemfile              # Ruby platform  \n    Rakefile             # Build tasks  \n    Dockerfile           # Infrastructure  \n    .env                 # Environment variables\n\n> Your platform becomes part of your code, but what does that mean?\n\n### Platform as Code\n\nIn the past, a platform was a separated entity, optimized for operations. Usually, a dedicated team was responsible for defining and maintaining a platform. T*hey had their own thing, sometimes with hidden agendas and surprises.*\n\nMoving these definition into the codebase makes them natural part of the application as it is visible and accessable for anyone. As an additional result they become versioned and can also follow software development practices. This ignites a natural collaboration and a lifecycle around the platform.\n\n> A healthy lifecycle eliminates technical debt and replaces it with refactoring and optimization.\n\n### But what is a platform?\n\nLet’s take a look at what actually a platform is.\n\nA platform is a set of software. From a technical point of view, a platform in general is the context where an application is *living*. Some says it’s like a glue that holds things together. Platform as concept helps to simplify the complexity of this layer.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/2A4hXYOUJVRPtMus15gA0i/d59ac7d03b67f470bd9a3e75accc771b/1_l3pjjADx1-Jr_V6fCrZ-xw.png)\n\n> You might call it **middleware** which is as good as any other label until it helps the understanding. I prefer **platfrom** because it is covering a wider more abstract view.\n\nA platform contains all the softwares and tools that are necessary for *execute — test — develop — operate* an application. It can include the language run-times, app servers, database servers, task runners, package managers, test run-times, shell-extensions, development tools and the operating system itself.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/XyCEfrZBhASi20gln2NWA/2d8b9c81d3202cf94b62a8a3198bc710/1_wpP9Oo-PxADOQD1Cf-zRpg.png)\n\n> Yes, a platform is including both the operating system and the development tools.\n\nYou can look at these elements as services that are available for supporting the application.\n\n#### Every application has its own platform\n\nThe original goal of defining platform was to make optimization and comfort for operations. The focus often was having as few platform as possible. Actually having only one was desired.\n\nThe challenges of adaptability and flexibility of the current competitive business environment turns the focus to development. Development teams has to live up to the challenge and utitilize methods such as agile application development and continous delivery.\n\nA platform manifest establishes an interface between the application and the underlying services. The capablities of the different elements are the playground and the boundaries for the applications.\n\nPlatform as code enables to every application the freedom and gives responsibility describing their own execution environment within the given boundaries. The team can modify, tune and upgrade according to the latest requirements.\n\nBecause of the self-containment it will be irrelevant how much platform and variations are existing.\n\n> Every application can have it’s own platform.\n\n### Competences\n\nSetting up and operating a platform still requires certain competencies. Moving the platform into the code doesn’t mean that you are transferring the competencies to other places. You need to find an organizational structure that fits best for your requirements. Here is a few options:\n\n#### Keeping the platform team together\n\nYou can keep the original platform team together and they continue maintaining the platforms. You are moving only the ownership of the platform to the developer team. The developer team is defining and updating the specifications, the platform manifest. The platform team delivers the competencies as a service to operate the platform. Developer team becomes the driver of the development of the platform. They are going to have close collaboration with each other but still separated.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/31GOfzpAddwbYS4FT9spTJ/530c32d8de6acbe49a4e622b7e1676f5/1_mv7mZR5JfJ83fTSIJhTZSw.png)\n\n#### ***Center of Excellence***\n\nAnother approach can be that the developer team has much more responsibility. They own, define and operate the platform. They can survive the everyday challenges, but they need external experts helping them for strategic decisions and on a crisis. The developer team has no expert competence instead a team of experts gathered around them are providing these services.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/24CxR1Go0xzDo6KIbm5dXn/a6566297cd8e985a834d50d928ae248b/1_Md38f7ZB9wpuGYBkl1yJGg.png)\n\n#### ***Cross-functional teams***\n\nA cross-functional team is where all the expertises are available for delivering the software within the team. They can manage the full stack from architecture, infrastructure management to coding and test.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/6XsrpaY8ktJZHqNd6sDDfy/3ea0e660f087cdc2a0244ac99458fdb3/1_QJaC9Ax6fem0VsyqcQJD6w.png)\n\n### The good parts\n\nWhen you have the *platform as code* and you have a committed organisation in place, you start getting the good parts out of this setup.\n\n> A living platform\n\n*   You will be able to adjust and update the platform as necessary to fit the latest requirements. There will be no latency on that.\n*   You are always getting a current overview of all your platforms, including software packages and versions.\n\n> The platform becomes accessible\n\n*   Provisioning a platform will be part of the continuous build and deployment practices. You are able to test your platform’s compliance early.\n\n> It is code, It is automated.\n\n*   Optimizing the platform architecture will not require extra effort anymore.\n*   Operations can give real-time feedback about the status of production and other stages for analysis.\n\n> No more hand-overs, just teamwork\n\n[**More on Feature Teams…**  \n*Feature areas may begin to shift over time. For example, user profile functionality would have never affected external…*www.linkedin.com](https://www.linkedin.com/pulse/more-feature-teams-alex-yakyma?trk=hp-feed-article-title-share \"https://www.linkedin.com/pulse/more-feature-teams-alex-yakyma?trk=hp-feed-article-title-share\")[](https://www.linkedin.com/pulse/more-feature-teams-alex-yakyma?trk=hp-feed-article-title-share)\n\n*   If you are a decision maker fx. a Chief architect, you can put real goals on optimization because you have the data for validation. There will be a real working interface between Stakeholders, Development and Operations.\n\n#### Conclusion\n\n*Platform as a code* is a way to enable and engage the team for better quality. *Platform as concept* is a way to organizing execution environments as part of your software. P*latform lifecycle* establishes the routine that avoids generating technical debt.\n\nThe final result is good architecture, great software and a happy engineering team!\n\n* * *\n\n#### External resources\n\nFinally a few great whitepapers on the topic:\n\n<figcaption><a href=\"http://www.davidchappell.com/writing/white_papers/What_is_an_Application_Platform-Chappell.pdf\" data-href=\"http://www.davidchappell.com/writing/white_papers/What_is_an_Application_Platform-Chappell.pdf\" class=\"markup--anchor markup--figure-anchor\" rel=\"nofollow noopener\" target=\"_blank\">http://www.davidchappell.com/writing/white_papers/What_is_an_Application_Platform-Chappell.pdf</a></figcaption>\n\n<figcaption><a href=\"http://www.davidchappell.com/writing/white_papers/What-is-ALM--Chappell.pdf\" data-href=\"http://www.davidchappell.com/writing/white_papers/What-is-ALM--Chappell.pdf\" class=\"markup--anchor markup--figure-anchor\" rel=\"nofollow noopener\" target=\"_blank\">http://www.davidchappell.com/writing/white_papers/What-is-ALM--Chappell.pdf</a></figcaption>\n"}},"excerpt":{"excerpt":"Move the platform definition into the code, handle them as code and get all the good parts."},"title":{"title":"Platform as Code — The good parts"},"date":"2017-02-11T22:33:38.144Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"![](//images.ctfassets.net/bz8w7lpo5q3h/5dcVfUPiGS4VRFlHeKdCCP/4c22e6c095b1f0d6a59c81cd8f4954c9/1_gwzFDh8MOEbmFkpUlpPnSA.jpeg)\n\n<figcaption>image credit&nbsp;: <a href=\"http://deathtothestockphoto.com\" data-href=\"http://deathtothestockphoto.com\" class=\"markup--anchor markup--figure-anchor\" rel=\"nofollow noopener\" target=\"_blank\">http://deathtothestockphoto.com</a></figcaption>\n\nI have worked with a couple of agile teams in the past few years in different stages of agile transformation. I have experienced a pattern that I would like to dig into in this post.\n\n> Replacing the waterfall handovers with a new agile version.\n\n#### What does that mean?\n\nThese teams has long and deep discussions about the scrum / kanban / agile board and their colums. When and how to move a task? What circumstances, conditions are allowing the moving of a ticket?\n\nI have seen 20+ pages “Law of Scrumboard”. A book including checklists, rules and handovers how people should behave.\n\nI might become boring but I visit the the agile manifesto again and again:\n\n[**Stop for a moment and visit the Agile Manifesto**  \nmedium.com](https://medium.com/@zsim0n/stop-for-a-moment-and-visit-the-agile-manifesto-b92e147369a6 \"https://medium.com/@zsim0n/stop-for-a-moment-and-visit-the-agile-manifesto-b92e147369a6\")[](https://medium.com/@zsim0n/stop-for-a-moment-and-visit-the-agile-manifesto-b92e147369a6)\n\n#### Collaboration!\n\nThe collaboration part of the agile manifesto has a special place in my heart.\n\nI think all the rituals — for example in Scrum — has to help and enable collaboration. Handovers has to be a natural part of the process based on confidence, not based on regulations. It is no way to have a law for every situation.\n\n> Collaboration for me is common understanding and trust.\n\nI would like to encourage you to agree on a Definiton of Done, that reflects the team’s best intensions about what is *good*, when things are d*one.*\n\n> Done should mean DONE not completed!\n\nHere is a few questions you should be able to answer:\n\n*   *What does quality code mean for the team?*\n*   *What is the expected output from a review?*\n*   *How to act and communicate with the stakeholder for succesful delivery everyday?*\n*   *If there is an issue: How to ask for help?*\n\n#### A Defintion of Done\n\nA good defintion of done shoud focus the followings:\n\n*   There is always a **story** behind the assignment. Take your time, talk to the stakeholders, the users. Invest into grabbing onto their story, their motivations.\n*   A solid story, also including the expected **results.** That can be a description of an expected behaviour or some other measurable results. These are the artefacts for validating your solution. You are building confidence by testing the code against them.\n*   **Collaboration** has a bigger context. Yes, good team collaboration is crucial, but you need the stakeholder and the user with you on the whole journey. An assignment shouldn’t be a “Fire and Forget” thing. It is the interface between you and them. Ask for being present, ask for availability. Arrange weekly demos / status meetings ensuring collaboration.\n*   Agree on a **scope** but keep the discussion open about what are the **must haves and** what are the **nice to haves**. Something might be important on day one, but might be less relevant after the first demo.\n*   And there are always unknown\n\n[**Handling the unknown**  \n*There are things known and things unknown and in between are the doors. — Jim Morirson*medium.com](https://medium.com/@zsim0n/handling-the-unknown-8a4aed1e7bb8 \"https://medium.com/@zsim0n/handling-the-unknown-8a4aed1e7bb8\")[](https://medium.com/@zsim0n/handling-the-unknown-8a4aed1e7bb8)\n\n*   Talk about timing, deadline and their priority. Many times timing is important but a feature that requires more time can be just as important.\n*   Strengthen the confidence in quality with continous and automated testing instead of a handovers. You had demos. You are practicing continous delivery. It should be *good enough*.\n\n[**Definition of Done**  \n*The team agrees on, and displays prominently somewhere in the team room, a list of criteria which must be met before a…*www.agilealliance.org](https://www.agilealliance.org/glossary/definition-of-done/ \"https://www.agilealliance.org/glossary/definition-of-done/\")[](https://www.agilealliance.org/glossary/definition-of-done/)\n\nI was focusing on Definiton of Done, but you can apply all these thoughts on other parts of the process, like Definition of Ready or Release.\n\nDon’t hesitate to dismantle bureaucracy and replace it with collaboration, because you are doing it for the good:\n\n#### for happy coding!\n"}},"excerpt":{"excerpt":"Here are a few tips how to avoid the pitfalls around the “Definiton of Done”"},"title":{"title":"Bad routines kill good teams"},"date":"2017-01-12T07:39:43.735Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"![](//images.ctfassets.net/bz8w7lpo5q3h/3d0VXJGlGZyTm5HTOlkBdL/125c376278073305e0014d2321174845/1_Jnpe7fyhqBq8fR0PGUkKHA.jpeg)\n\n<figcaption>image credit: <a href=\"http://deathtothestockphoto.com\" data-href=\"http://deathtothestockphoto.com\" class=\"markup--anchor markup--figure-anchor\" rel=\"nofollow noopener\" target=\"_blank\">http://deathtothestockphoto.com</a></figcaption>\n\nThere are many talks everywhere about efficiency, productivity processes, optimizing tooling and security. The main focus is always on delivering business value and fast.\n\nPeople are using a bunch of *smart* buzzwords to support their arguments: *DevOps, SAFe, Scrum, PaaS, IaaS, Containers, Agile testing, Continous delivery.*\n\nBut what about fun and happiness? I am calling *Richard Branson* for helping me today.\n\n> Clients do not come first. Employees come first. If you take care of your employees, they will take care of the clients. — Richard Branson\n\n#### What makes me happy?\n\nAs a developer, I like freedom when it comes to coding. Experimenting, playing with code. I love to create great software and follow modern architecture principles. From technical point of view full access to my computer and other devices has priority. It goes without saying, I need unrestricted access to the internet. Working with complex solutions requires instant access to tools and knowledge. I cannot work alone, *pair programming* is the way I love to work.\n\n> I believe that innovation and good software can only arise from a work environment described above.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/1KEB9YLoBlQxjOHia65w2q/1263f447684b07686d6347eb1e1ce318/1_m5emUnqGlhKKsAgbm2j5Gg.png)\n\n#### Here is my message\n\nIt is possible to protect intellectual properties and business values without locking down the development department in the basement. Using outdated content filter firewalls and security policies from the ’90 kills the spirit. Military grade control and overwhelming approval processes result in workarounds and bad software. Easy and seamless communication and knowledge sharing is crucial in the team.\n\n> Accept the fact technology and software is everywhere. The people crating them need space. Believe in them, they are burning for creating great software!\n\nThat was my rant on developer happiness. I would like to hear your voice! What makes you a happy developer?\n\n*Happy holidays.*\n"}},"excerpt":{"excerpt":"Software is everything — everything else is nothing"},"title":{"title":"Take care of the developer happiness and the rest will follow"},"date":"2016-12-20T20:26:25.495Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"![](//images.ctfassets.net/bz8w7lpo5q3h/42dePOgVkSLTFyyLERjkOv/23d4c72f48166687ea6761a1c7c4ff6c/1_15k-qWM93Zsqt7lkh7zDyA.jpeg)\n\n<figcaption>Image credit: <a href=\"http://deathtothestockphoto.com\" data-href=\"http://deathtothestockphoto.com\" class=\"markup--anchor markup--figure-anchor\" rel=\"noopener\" target=\"_blank\">http://deathtothestockphoto.com</a></figcaption>\n\nSoftware developers are always dreaming about well defined assignments with clear handovers. The infamous topics *definition of ready \\[DoR\\] and definition of done \\[DoD\\] are* playing great role in that.\n\nCruising on the happy path would be great, but usually the journey of delivery is a tricky exercise. Many times there are more questions than answers, especially at the beginning.\n\nThis post is about how to handle imperfection. Balancing between commitment, risk and fun.\n\n#### **The paralysis by analysis**\n\n*“…I cannot do this or that until I know all the details about the requirement…You have to give me a precise estimate on the task before you can start it…”*\n\nFamiliar?\n\nThese are typical symptoms of the fear of the *unknown*. There is no such thing as delivering perfection at the first run. There is always a point where [*good enough is good enough*](https://dzone.com/articles/applying-8020-rule-software).\n\n> Your commitment has to focus on continuous improvement.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/5lhX9hLLzGDOqJ3Z0V8miO/9800865729e2b2235431798e730fb81e/1_JUoIaqa4acZdfacgnWn_rw.png)\n\nBelieve in yourself, trust each other’s experience and expertise. A developer knows how to develop, a project manager knows how to handle projects and a tester knows how to test.\n\n> Delivering is always a team effort.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/7E21qYVUyOXr0gKAeNG4fA/d2c651eac976356e23651af71d637a48/1_rpTdtbzZtFQ3OWR35Cbizw.png)\n\n#### Zero tolerance\n\nAnother challenge you are facing is handling risk. On the one end are the people who are ignoring the risks and trying to deliver at all cost. On the other end are the ones developing with zero tolerance against errors.\n\n> The goal is to find the sweet spot.\n\nManaging risk is about constant evaluation, adapting and changing. The goal is finding the sweet spot where risk is known and acceptable.\n\n> Where are unknown there are always risk of failure.\n\n### Great things happening out of your comfort zone\n\nToday I would like to turn your focus on the power of experimenting. I would like to encourage you to fail and fail fast. I would like to show the advantages of executing multiple tracks and throwing away the ones that are not optimal for your needs. At the end you are only focusing on the one that leads you to success.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/1wyh9lECZIihPaGwCBNPmG/fd36d8b699a4fa7f01aed978871a5255/1_ufMuN-uQcHI8Lyk3FQL6cA.png)\n\nWhen you are firing up your favourite IDE, kickstarting a virtual environment and starting to code, you feel confident.\n\n> This is your comfort zone.\n\nLet’s step into the *unknown* by executing multiple experiments. Do it either *time-boxed* or with *reasonable small scope*. Try and drop ideas, visit edge cases. Collect and record as many experiences as you can.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/2jRPDAbS5pE0U83otSRP9o/461ee8e6f684638173214375984df509/1_7jPLanOosxWBX85rql5lAw.png)\n\nDealing with the unknown is mostly about going into the wrong direction. The great thing with software is that you can always write new code. Dropping a small chunk of experimental code costs almost nothing.\n\n> Be prepared throwing code away.\n\nYour goal is to find the path with the experiments that lead to solutions that can be deployed to production.\n\n> Be patient\n\nThe agile (scrum) world has developed a nice terminology around this concept. Look into these articles about *Spikes, Tracer bullets, Research*:\n\n[**Prototypes, Spikes and Tracer Bullets**  \n*Here’s an attempt to classify various development techniques and the sequence in which they tend to be used.*blog.davidpeterson.co.uk](http://blog.davidpeterson.co.uk/2011/01/prototypes-spikes-and-tracer-bullets.html \"http://blog.davidpeterson.co.uk/2011/01/prototypes-spikes-and-tracer-bullets.html\")[](http://blog.davidpeterson.co.uk/2011/01/prototypes-spikes-and-tracer-bullets.html)\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/5K9mKCYrlyHkFxbWEFeJqT/b320a35eaab1aec1b47d7c136b0f2d06/0__IpF7NgFpLILh1bp..jpg)\n\n<figcaption><a href=\"http://blog.davidpeterson.co.uk/2011/01/prototypes-spikes-and-tracer-bullets.html\" data-href=\"http://blog.davidpeterson.co.uk/2011/01/prototypes-spikes-and-tracer-bullets.html\" class=\"markup--anchor markup--figure-anchor\" rel=\"nofollow noopener\" target=\"_blank\">http://blog.davidpeterson.co.uk/2011/01/prototypes-spikes-and-tracer-bullets.html</a></figcaption>\n\n[**Research, Spikes, Tracer Bullets, Oh My!**  \n*Spike — a quick and dirty implementation, designed to be throw away, to gain knowledge. Research — broad, foundational knowledge-gaining to decide what to spike or give the ability to estimate…*www.gettingagile.com](http://www.gettingagile.com/2007/10/22/research-spikes-tracer-bullets-oh-my/ \"http://www.gettingagile.com/2007/10/22/research-spikes-tracer-bullets-oh-my/\")[](http://www.gettingagile.com/2007/10/22/research-spikes-tracer-bullets-oh-my/)\n\n[**Guidance - Spikes - Scaled Agile Framework**  \n*If we knew what we were doing, it wouldn't be called research. -Albert Einstein Spikes are a special type of Enabler…*www.scaledagileframework.com](http://www.scaledagileframework.com/spikes/ \"http://www.scaledagileframework.com/spikes/\")[](http://www.scaledagileframework.com/spikes/)\n\n### Everything is production\n\nYou have seen theories and some terminology that might help you. Let’s take this topic to the next level.\n\nIn the era where [*everything can be code*](http://www.bmc.com/blogs/infrastructure-everything-code-changes-everything/) and there is [*continous delivery*](http://martinfowler.com/bliki/ContinuousDelivery.html) and *automated testing*, where tooling and infrastructure is cheap and accessible from everywhere to everyone, I would like to encourage you to do the following:\n\n> Always produce production grade code and you should do it in a throwable / replaceable manner.\n\n> Kill code fearlessly — [Dan North](http://dannorth.net)\n\n> Challenge the status quo all day everyday.\n\nMore practically, when you are getting an assignment :\n\n*   Start experimenting.\n*   Demonstrate results regularly (weekly).\n*   Always present alternatives.\n*   Write tests from the very beginning. Do it TDD style if you can.\n*   Define the *API first.*\n*   Take care of acceptance tests (how your code look like from the user point of view) as well\n*   Don’t forget the documentation. (Readme.md is good enough)\n*   The code that *works on my machine* is not enough, take care of the deployment too.\n\n### The examples\n\nFinally let´s take a look at a few examples, how this approach could work:\n\n1Let’s imagine your assignment is introducing social authentication to a node.js application. Let’s also assume that you are over all the ‘why we need this” discussion. There are no best practices or examples at your place how should you do this.\n\nAfter you did the homework: Searching Google and Stackoverflow you ended up the following two alternatives:\n\n[**Identity infrastructure, built for developers**  \n*A universal identity platform for customers, employees and partners*auth0.com](https://auth0.com \"https://auth0.com\")[](https://auth0.com)\n\n[**Passport**  \n*Simple, unobtrusive authentication for Node.js*passportjs.org](http://passportjs.org \"http://passportjs.org\")[](http://passportjs.org)\n\nBut now, doing documentation (buzzword) analysing and presenting marketing materials as arguments, you are just cloning and initializing one of the example applications from github.\n\nWhen you are confident with the examples, you setup a demo for your stakeholder including your senior architect and you present them the to working application. They get hands-on experience with the solutions, instant feedback from a working application. They can make a fast decision.\n\n2 Let’s look into a coding example, where your task is implementing some new features to the following code:\n\n    `async1(function(){  \n        async2(function(){  \n            async3(function(){  \n                async4(function(){  \n                    ....  \n                });  \n            });  \n        });  \n    });`\n\nYou can follow the old habits and just put the new code into this [pyramid of doom](http://skaghost.herokuapp.com/pyramid-of-doom/)\n\nor\n\nYou can challenge the status quo and refactor the code with promises before you are adding the new features.\n\n[**Staying Sane With Asynchronous Programming: Promises and Generators**  \n*Callback Hell, also known as Pyramid of Doom, is an anti-pattern seen in code of programmers who are not wise in the…*colintoh.com](http://colintoh.com/blog/staying-sane-with-asynchronous-programming-promises-and-generators \"http://colintoh.com/blog/staying-sane-with-asynchronous-programming-promises-and-generators\")[](http://colintoh.com/blog/staying-sane-with-asynchronous-programming-promises-and-generators)\n\n    `async1(function(){..})  \n        .then(async2)  \n        .then(async3)  \n        .catch(function(){  \n            // Solve your thrown errors here  \n        })`\n\nThe result will be a much more readable code and developer happiness.\n"}},"excerpt":{"excerpt":"There are things known and things unknown and in between are the doors. — Jim Morirson"},"title":{"title":"Handling the unknown"},"date":"2016-12-06T13:33:04.255Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"![](//images.ctfassets.net/bz8w7lpo5q3h/4gRZlsEGzZgzefe1yFDQIg/a1fde074a2f4a3f12056601459b9eee9/1_o4qrVg3JTIa9Vm8-wtrEjw.jpeg)\n\n<figcaption>Image credit: <a href=\"http://deathtothestockphoto.com\" data-href=\"http://deathtothestockphoto.com\" class=\"markup--anchor markup--figure-anchor\" rel=\"nofollow noopener\" target=\"_blank\">deathtothestockphoto.com</a></figcaption>\n\nEarlier I wrote a post about principles, like [*separation of concerns*](https://medium.com/@zsim0n/separation-of-concerns-what-is-that-for-7f1792969948#.ql5raqi6f) and their role in software development. One of the reflections I got is the following:\n\n> Do not follow the principles, if you do understand the system.\n\nThis statement was the inspiration for writing this post.\n\n*What does it mean understanding the system? How can you do that? How can understanding the system be interpreted in the context of collaboration?*\n\n### Understand the system\n\nThe discussions about understanding the system usually leads to the following argument about the agile manifesto:\n\n> The meaning of “Working software over comprehensive documentation ” is for me : Read my the code, it is perfect and expressive enough to understand the whole system.\n\nIs this o.k.? Not really.\n\n> The purpose of software development is creating positive business impact — [Dan North](https://dannorth.net) : [The software that fits in your head](https://gotocon.com/dl/goto-amsterdam-2016/slides/DanNorth_SoftwareThatFitsInYourHead.pdf)\n\nA software system is not only about the code but about the business value that it delivers.\n\nUnderstanding a software should also include the surroundings. *How the architecture looks like? What kind of dependencies are there? How to deploy? What are the latest changes? Common issues, etc…*\n\nFor that you need living documentation.\n\n### Living documentation for me is\n\n*   good enough,\n*   collaboratively edited,\n*   up-to-date,\n*   always online,\n*   tagged and searchable,\n*   stored as close as possible to the source code.\n\n### Audience\n\nUnderstanding the system depends also on who is trying to understand it. Different context requires different detail level, different presentation format and language. Let’s take a look into one of the possible segmentations:\n\n#### The team\n\nA development team usually would like to share technical insights about architecture, deployment, configuration. In that case the best is if the documentation living just inside the code repository in text format. Using formats like html, markdown delivers standard formatting, nice presentation. Documenting the code using commenting standards and documentat generators are good practices.\n\n#### Stake holders\n\nProjects, iterations or releases are the scene where people, teams or departments have to collaborate and synchronize their effort for delivering the right product. This requires another level of understanding of multiple systems. Architectural drawings, workflow and sequence diagrams, wireframes and the additional high level descriptions such as user stories or system descriptions are the necessary documentation for them.\n\n#### Management\n\nDecisionmakers also needs input. They are looking for high level overview and status. Different type of reports can fulfill that need.\n\n### How much is good enough?\n\nDocuments and manuals shouldn’t represent handovers and gateways, instead they need to be the platform for sharing knowledge.\n\nYou can say that the documentation is enough when the selected audience are signaling that they have built confidence to the system. They can ask qualified questions, they can find their way and searching for answers.\n\n### Collaboration\n\nAlso, writing documentation is not the most loved part of software development. Making it happen as a joint effort is important. The whole team needs to be involved so everyone gets ownership. Creating documentation should be a natural part of the delivery process.\n\n*Easy, effortless, and as automatic as possible.*\n\n### Tooling\n\nThere are really good tools in the wild today. Let’s take a look at a few examples.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/3vrMQNdn2AI1iRLVkp5C97/98c6799acd431d71676ec5a27bff837e/1_zWboDiesmzI7sQVmhhHmEQ.png)\n\n#### Documentation as Code\n\nMany repository manager like [Github](https://github.com), [Gitlab](https://about.gitlab.com) can render [markdown](http://kirkstrobeck.github.io/whatismarkdown.com/) files.\n\nThe README.md in the root folder can be the *“homepage of the repo”*. All the information for the newcomers can be placed there. What is this repository about. How and where to find informations in the repository. How to build, test and deploy the application.\n\nA CHANGELOG.md can contain information on the history of the system and give feedback to release management.\n\nUsing commenting conventions such as [smart commits](https://confluence.atlassian.com/fisheye/using-smart-commits-298976812.html) can bring code and documentation integration to the next level.\n\nThe use of other human readable markup formats such as [Yaml](http://yaml.io), [Raml](http://raml.org) or [Swagger](http://swagger.io) leads to better editing experience and easy rendering.\n\n#### Software architecture as Code\n\nI would like to recommend to take a look into [Simon Brown](http://simonbrown.je)’s work on creating modern and living documentation for software architecture. Check the [C4 model](http://www.codingthearchitecture.com/2014/08/24/c4_model_poster.html) and [Structurizr](https://structurizr.com). You will find his [books](https://leanpub.com/book_search?search=simon+brown) and [presentations](http://www.codingthearchitecture.com/presentations/) exciting.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/1sp2bg7tosS3l7XTFgXmau/811e5886c08aee69462bb813a0ba78f4/1_I35A_K2eCurTSRUZAVtFKA.jpeg)\n\n> The C4 software architecture model\n\n*The “C4 model” is a simple hierarchical way to think about the static structures of a* ***software system*** *in terms of* ***containers****,* ***components*** *and* ***classes*** *(or* ***code****).*\n\n*Structurizr does not provide an online “drag and drop” editor to create diagrams. Instead, you* ***create a software architecture model using code and upload it via the web API****. Here’s a simple example using Java.*\n\n    `Workspace workspace = new Workspace(\"My model\", \"This is a model of my software system.\");  \n    Model model = workspace.getModel();  \n      \n    **Person user = model.addPerson(\"User\", \"A user of my software system.\");  \n    SoftwareSystem softwareSystem = model.addSoftwareSystem(\"Software System\", \"My software system.\");  \n    user.uses(softwareSystem, \"Uses\");**  \n      \n    ViewSet viewSet = workspace.getViews();  \n    SystemContextView contextView = viewSet.createSystemContextView(softwareSystem, \"context\", \"A simple example...\");  \n    contextView.addAllSoftwareSystems();  \n    contextView.addAllPeople();  \n      \n    Styles styles = viewSet.getConfiguration().getStyles();  \n    styles.addElementStyle(Tags.SOFTWARE_SYSTEM).background(\"#1168bd\").color(\"#ffffff\");  \n    styles.addElementStyle(Tags.PERSON).background(\"#08427b\").color(\"#ffffff\");  \n      \n    StructurizrClient structurizrClient = new StructurizrClient(\"key\", \"secret\");  \n    structurizrClient.putWorkspace(1234, workspace);`\n\n#### Collaborative documentation\n\nAnother achilles heel of the living documentation is when people actually have to produce text together. Writing is art. Don’t be shy asking for help! Use tools like [Google Docs](https://docs.google.com) for collaborative document editing. You will find fun writing a document in *pair programming* style. Use chat like [Slack](https://slack.com) for discuss your pain with the rest of the team.\n\n#### Document as product\n\nA document is also a product you are delivering. You need to agree with the stakeholders about the content. Ask them to give you a *table of contents, an abstract*. Agree on the *size* and the *format*. All of these should be part of the assignment’s accept criteria and part of your **definition of done** in general.\n\n#### Online documentation\n\nAny of these above has zero value if the documentation is not **accessible for everyone and searchable by anyone**. Use platforms that has tight integration with code repositories and enabling collaboration such as [Atlassian Confluence](https://www.atlassian.com/software/confluence). You can also turn a repository manager easily into knowledge sharing center.\n\nKeep your solution simple and stupid. Custom theming and templates are not the point. Use the default package what you are getting out of the box. You can tune them later.\n\n#### Security bias\n\nThe last topic is security, securing sensitive data. Trying to minimize risk shouldn’t stand in front of innovation and agility. Separate the sensitive informations from the rest of your documentation and encapsulate them into a protected area.\n\n### Closing words\n\nI have tried to highlight a few areas that could help creating living documentation. I hope there are some takeaways in the post. Long story short, software development should always be fun including writing the documentation.\n"}},"excerpt":{"excerpt":"The living documentation"},"title":{"title":"Do not follow the principles, if you do understand the system"},"date":"2016-11-20T09:50:12.781Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"![](//images.ctfassets.net/bz8w7lpo5q3h/1hTJ0uCATn2bEyN5Pt3Lzw/05d2fbad0e6c6f64ceef001ef21f32e9/1_MG-it1E6JyHdH-TViHD5ow.jpeg)\n\n<figcaption>Image credit&nbsp;: <a href=\"https://shahabalizadeh.artstation.com\" data-href=\"https://shahabalizadeh.artstation.com\" class=\"markup--anchor markup--figure-anchor\" rel=\"nofollow noopener\" target=\"_blank\">shahabalizadeh.artstation.com</a></figcaption>\n\n*&TLTR; The post contains a lot of theories and abstracts. Sorry, no code this time.*\n\nSeparation of concerns *\\[SoC\\]* , Keep It Simple and stupid *\\[KISS\\]*,Don’t repeat yourself *\\[DRY\\]* are typical examples for principles in software development.\n\n#### **Why do you need principles?**\n\n> **Principles are** some kind of distilled source of truth that come from experiences. They are internally motivating and **guiding you** to do the things that seem good and right.\n\n> Principles are good for your code.\n\nIn this post I would like to focus on *Separation of Concerns* that helps me the most dealing with the challenges in a complex, resistent corporate environment.\n\n> **Separation of concerns —** Divide your application into distinct features with as little overlap in functionality as possible. The important factor is minimisation of interaction points to achieve high cohesion and low coupling — Microsoft\n\nYou can read more about the the basics at [wikipedia](https://en.wikipedia.org/wiki/Separation_of_concerns), [effectivesoftwaredesign](https://effectivesoftwaredesign.com/2012/02/05/separation-of-concerns/) or [Microsoft](https://msdn.microsoft.com/en-us/library/ee658124.aspx).\n\n#### **Silos and monoliths**\n\nMisinterpretation and unbalanced use of principles result in bad architecture, witch-hunt after duplications and unnecessary bureaucracy with hand-over process madness. It could happen on every level from code to enterprise architecture and always ends in one of the following results:\n\n1.  The crazy optimisation breaks down the boundaries between components and ends in a **monolith.**\n2.  The extreme level of centralization combined with mindless separation of building blocks creates organizational and technological **silos**.\n\n> This Is insane.\n\n> Finding and keeping the right balance is art. That doesn’t mean it is impossible. In short: use them wisely.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/1iuH0E1JWlVu1jw6KFr7FG/e0855acc1158428fe609b03f8fd6771e/1_zS5oGbaH6e06Z4ELgHKcmA.png)\n\n#### **Separation of Concerns**\n\nIn the following I would like to focus on Separation of Concerns and how this principle encourages and strengthens collaboration. Yes, you have read it right — *I would like to talk about collaboration in the context of separation.*\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/7PRJjBFmEM55WcYO2Zae1/1814d09b7c33df1f7c42a95a4de653fc/1_T7E-OEPe1RLnQfrYmfK7hg.png)\n\nWhen you are separating, isolating or decoupling things , there is always a point where you realise that the components you are working on are part of a bigger context. They are not islands. Their purpose is to be part of something bigger. That requires collaboration.\n\nI would like to turn your attention to that thin layer between the components, the boundary that is establishing the separation. Focus on that and forget about the rest for a moment.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/7l8ykMrvRBmPvhW6C1VXZm/215d4861ddbd77b13fc2f5155733795b/1_tC5YzhibopluAP5H4fbqzQ.png)\n\n* * *\n\nEvery time you are writing code, defining software architecture or describing requirements I suggest to start working with theses boundaries. Identify your external dependencies and define the communication channels between you and the rest of your world.\n\n> Define your API First!\n\nThan fill up the components with content. The following benefits come with this approach:\n\n*   Natural way of reducing complexity by giving access to the larger context.\n*   Experimenting is cheap with an API.\n*   It brings an easy common understanding of the problem that needs to be solved.\n*   By design it creates a clear cut between your components, and at the same time establishes the contract for future communication.\n*   It is encouraging discussion between the parties (teams). Each of them can focus on their own side of the API.\n*   Mocking and stubbing will be a straightforward activity that ease testing.\n*   API is transparency.\n\nThe word API *\\[Application Programming Interface\\]* is related to software development but I would like to encourage you using this technique on higher level as well, or in different contexts, even in organisational development.\n\n#### **Let’s take a look at a few example.**\n\nThe most basic API you can find are the function definitions laying in your code. In Object Oriented Programming defining *Interfaces* could be the API. Of course REST APIs or Web Services are de facto APIs. SLAs in the context of an IaaS are the API facing the users.\n\n`build.me, test.me install.me` are the API’s of a Self-contained application thet helps driving through the stages of the lifecycle. They establishing contact with the different systems responsible *Build — Test — Deploy*.\n\nA Cross-functional team using kanban has an API including their backlog and their kanban-board. Definition of Ready *\\[DoR\\]*, Definition of Done *\\[DoD\\]* are the API for delivering etc.\n\nFinally I hope you have enjoyed this short tour into the abstract world of software architecture and at least a few af these thoughts help you the next time when you have to deal with boundaries and collaboration.\n\n#### External resources in the topic\n\n*   [https://apievangelist.com/2014/08/11/what-is-an-api-first-strategy-adding-some-dimensions-to-this-new-question/](https://apievangelist.com/2014/08/11/what-is-an-api-first-strategy-adding-some-dimensions-to-this-new-question/)\n*   [https://www.mulesoft.com/resources/esb/succcessful-api-management](https://www.mulesoft.com/resources/esb/succcessful-api-management)\n"}},"excerpt":{"excerpt":"Embracing SoC* over DRY*"},"title":{"title":"Separation of concerns — What is that for?"},"date":"2016-11-03T14:05:08.876Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"*&TLTR; If you are using Heroku or other modern PaaS solution you will feel confortable.*\n\n#### *What is an application?*\n\nEverything that is made of code is an *application* to me. They follow the same software development lifecycle practices.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/7KN1zsvNBeUUAJesIPqYK/51e0704bb597e2d802464f7283c11948/1_G6xsfpwtIQHStNBiIYuVDw.png)\n\n<figcaption>Software lifecycle</figcaption>\n\n> Back to the roots, the Software itself!\n\nYes, not only the app but infrastructure, platform configuration, monitoring, etc. are based on code and so they are all *applications.* This means you can also apply the same tooling and all the technical practices to them.\n\nFor example, you can run a CI server that builds environments. You can take it to the extreme and build your own build-server every time you need to build an application.\n\n> They are not special!\n\nBecause everything is *code* you can put everything under *source control.* That means you get history and traceability. The code is extremely accessable for everyone and ready for collaboration.\n\n    git clone\n\n#### Boundaries\n\nAnything inside this repository is part of your application, delivering features. Everything outside is out of your scope.\n\n> This is the context of your application.\n\nExpanding the context to include *everything* that is necessary for releasing an app leads to the concept of the *self-contained application*.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/X1TqmmLtqzBJQFY6a0pox/216c5b10d700b06783ca44223c575832/1_1FfJBf7U05ToVplwwVlWvA.png)\n\n<figcaption>Application stack</figcaption>\n\n### The self-contained application\n\nA self-contained application repository includes all elements needed to support the entire application lifecycle. The repository includes the following in addition to the **code**:\n\n*   Tests\n*   Configurations\n*   Database migration scripts\n*   Third party dependencies (libraries, modules, internal or external resources)\n*   Platform\n*   Infrastructure\n*   Technical documentation (readme, release notes)\n\nAn abstract repository structure could be:\n\n    /src                 # Code  \n    /tests               # Tests\n    .my.description      # Application meta data: version, uuid, license  \n    .my.dependencies     # External dependency descriptor  \n    .my.env              # Environment dependent variables  \n    .my.config           # Application configurations\n    build.me             # Build tasks  \n    test.me              # Test tasks  \n    deploy.me            # Deployment tasks  \n      \n    my.infrastructure    # Infrastructure descriptor  \n    my.platform          # Platform descriptor\n\nLet’s take a look at a real life example:\n\n    /frontend            # React + node.js frontend code   \n    /backend             # Ruby on rails backend code   \n    /tests               # Tests  \n    package.json         # Javascript platform and tasks  \n    Gemfile              # Ruby platform  \n    Rakefile             # Build tasks  \n    .rspec               # Config  \n    config.ru            # Config  \n    Dockerfile           # Infrastructure  \n    .env                 # Environment variables\n\n#### Benefits\n\nWith this mindset you are removing complexity from the deliverables. It is giving you more opportunity focusing on the business requirements. It will be more clear where the boundaries are.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/36XoHCw7Jvg5QNPxRZgSTx/a0c0fa55cdd53af9e8cbbbb02ccdde05/1_vxwAGYUmMQYNSkz-rpFhNQ.png)\n\n<figcaption>Deployment pipeline</figcaption>\n\nYour delivery pipeline will be straightforward. All the activities (build — test — provisioning — deploy) can be highly automated. On-boarding and technology support is going to be extremely simple.\n\nFinally at this point you can stop thinking about terms like *Dev* or *Ops* or *DevOps* or *AppOps* and the challenges they mean.\n\n> You start practicing software development\n\nI would also recommend :\n\n[**Infrastructure and How “Everything as Code” changes everything via @BMCSoftware**  \n*This is the third blog in our mini-series that illustrates how BMC was able to use agile development, cloud services…*www.bmc.com](http://www.bmc.com/blogs/infrastructure-everything-code-changes-everything/ \"http://www.bmc.com/blogs/infrastructure-everything-code-changes-everything/\")[](http://www.bmc.com/blogs/infrastructure-everything-code-changes-everything/)\n"}},"excerpt":{"excerpt":"This is the only sentence here that contains the word microservice."},"title":{"title":"My take on the self-contained application"},"date":"2016-10-26T21:21:11.979Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"20th anniversary of Goto Copenhagen brought a group of exceptionally great speakers and talks this year. I would like address one of the topics in this post:\n\n[*“Educating the builders of tomorrow with science and technology skills using LEGO® Education WeDo 2.0\" -Hanne Hylleberg Ravn, Flemming Bjørn Jessen*](https://gotocon.com/cph-2016/presentations/show_talk.jsp?oid=7766)\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/3DCohY9o6T6hEdBs3Q9gQ2/414f026b0ffe65ac2ad47902331a7b3f/1_Fxd4RlSQOGaylyUNx-7dvA.jpeg)\n\n<figcaption>Lego: <a href=\"https://le-www-live-s.legocdn.com/images/423923/live/sc/Products/5004833/5004833_1050x1050_1_xx-xx/c5fb45cce123af76735136c9a62da317/80218c5f-b088-42c5-9252-a58700e5045b/original/80218c5f-b088-42c5-9252-a58700e5045b.jpg?output-format=jpg&amp;fit=inside%7C500:500&amp;composite-to=*,*%7Chttps://le-www-live-s.legocdn.com/sc/static/bg-max.jpg?resize=500:500\" data-href=\"https://le-www-live-s.legocdn.com/images/423923/live/sc/Products/5004833/5004833_1050x1050_1_xx-xx/c5fb45cce123af76735136c9a62da317/80218c5f-b088-42c5-9252-a58700e5045b/original/80218c5f-b088-42c5-9252-a58700e5045b.jpg?output-format=jpg&amp;fit=inside%7C500:500&amp;composite-to=*,*%7Chttps://le-www-live-s.legocdn.com/sc/static/bg-max.jpg?resize=500:500\" class=\"markup--anchor markup--figure-anchor\" rel=\"noopener\" target=\"_blank\">80218c5f-b088–42c5–9252-a58700e5045b.jpg</a></figcaption>\n\nThe presentation was a great product showcase of [WeDo 2.0](https://education.lego.com/en-us/shop/view-all-products?product_lines=WeDo2) from Lego.\n\nThe topic of **introducing technology in Education** is what I would like to focus on today. Checking the product site and talking with the Lego guys the following question hit me:\n\n> Why WeDo 2.0 is not available for free for elementary schools in Denmark? Huge corporations are many times generous with their spectacular projects:\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/5B0zFgKIrvBo7LzvEX4uOi/9218a8fe1b07498380b0e01d1e9046c0/1_LQCDcNubrTcm093BBaUEeg.jpeg)\n\n<figcaption><a href=\"http://www.visitcopenhagen.com/copenhagen/royal-danish-opera-house-gdk422032\" data-href=\"http://www.visitcopenhagen.com/copenhagen/royal-danish-opera-house-gdk422032\" class=\"markup--anchor markup--figure-anchor\" rel=\"noopener\" target=\"_blank\">The Royal Danish Opera&nbsp;House</a></figcaption>\n\n> Wouldn’t it be great if Lego with other successful Danish companies join with State/Municipalities and make these kits available gratis for schools?\n\nI know I know, It is easy to play with other people’s money. Can I just think loud for a moment?\n\nThere are **ca 1300** elementary level schools in denmark. The list price of a WeDo 2.0 ReadyGo 24-Student Pack is **1920 USD**.\n\nA 10% coverage (130 schools) with average 2 box per school is a **$500.000** value investment into the future. *(this is on list price without any discount !).* I am guessing a 10% $50.000 yearly maintenance fee. Converting it into Danish kroner it is ca. 3.300.000 dk — the price of a house, and ca 330.000 dkk per year — the price of a family car in Denmark.\n\nIs this a lot of money? **Yes!** Does it worth it? **Definitely YES!** Can it happen? ***I have no idea.***\n\nBut I really hope that more and more companies recognise the importance of investing into the future of our children.\n\nThanks for your attention.\n"}},"excerpt":{"excerpt":"20th anniversary of Goto Copenhagen brought a group of exceptionally great speakers and talks this year. I would like address one of the…"},"title":{"title":"The future is in our hands — Technology in Education"},"date":"2016-10-13T10:38:43.873Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"*Originally posted on* [*Linkedin*](https://www.linkedin.com/pulse/stop-moment-visit-agile-manifesto-zoltán-simon)\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/4HSIu0NM5LeklbvztsSNYN/73dda790e7b2985508e2be621f6fe6fa/1_oMdZ4gRnBRAWcSBoLAG14A.jpeg)\n\n<figcaption>Image credit — <a href=\"http://deathtothestockphoto.com\" data-href=\"http://deathtothestockphoto.com\" class=\"markup--anchor markup--figure-anchor\" rel=\"nofollow noopener\" target=\"_blank\">deathtothestockphoto.com</a></figcaption>\n\nI have had talks and activities around DevOps and Agile transformation all week long. It is weekend now, and I thought it is time for a short reflection on the week. We people has the tendency to forget the core values behind the scene. We are running in the hamster wheel, focusing on edge cases or generalising everything. I felt it is time to remember the main driver behind all frameworks, methods and tools in the agile movement.\n\n#### The simple and clear manifesto we should use everyday:\n\n> Individuals and interactions over processes and tools\n\n> Working software over comprehensive documentation\n\n> Customer collaboration over contract negotiation\n\n> Responding to change over following a plan\n\n[**Manifesto for Agile Software Development**  \n*We are uncovering better ways of developing software by doing it and helping others do it. These are our values and…*agilemanifesto.org](http://agilemanifesto.org \"http://agilemanifesto.org\")[](http://agilemanifesto.org)\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/6YZqeP1wGtnjaFaqSyWudB/1a149c3908342a1b93fb7e5ab80f5625/1_cVvos6B42ZYsAe_Z0mBZlQ.jpeg)\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/42lzVyYS6wMw3wIXrbiIBC/032e63e415ffea785fe8845b8539b940/1_gDTEk9YACyb5roFKPQOJNQ.png)\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/3YL0gvDRLGTZedUxSp0vmo/9eb22c844ded5daae466d31e80cfe239/1_x9cml5qWRBZOPxYtc3s9sA.jpeg)\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/ZWgPntt6c9wIjEDRmQVCP/0763d3ead4388fb47606446ecdeaf897/1_RF2AvvlckhqF5O7V2CQWcA.jpeg)\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/6DkYJk3Gk9dRvJsNEbAi9O/7667aa650ba2630d7d094cf5fb3b82c1/1_tyKR12rX9zCdmp7qynzCMQ.gif)\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/2YA22xSEFzZSBFqgVQOCXt/a3849d4ff04a56d3aa5b266c2caee0d0/1_0cos1AN1dBlP30LUWij9UA.jpeg)\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/1qTjKrjin7HaW7cSdXVMhJ/33e5620cad5eb4c4f07b2e3a1f9f9a6b/1_hR_JAqOmi4vQ1i8tFqAN8A.jpeg)\n\n#### Image credits:\n\n*   [http://www.softwaretestingclass.com/agile-manifesto-and-principles/](http://www.softwaretestingclass.com/agile-manifesto-and-principles/)\n*   [https://rafvb.wordpress.com/2012/10/18/agile-manifesto-wallpapers/](https://rafvb.wordpress.com/2012/10/18/agile-manifesto-wallpapers/)\n*   [http://blog.twg.ca/2009/04/selling-agile-are-estimates-the-new-spec/](http://blog.twg.ca/2009/04/selling-agile-are-estimates-the-new-spec/)\n*   [https://pritamsen.wordpress.com/2014/04/14/agile-manifesto/](https://pritamsen.wordpress.com/2014/04/14/agile-manifesto/)\n*   [http://www.lynnecazaly.com.au](http://www.lynnecazaly.com.au)\n*   [http://blog.presentationload.com/efficient-agile-project-management/](http://blog.presentationload.com/efficient-agile-project-management/)\n*   [http://blog.kaliop.com/en/blog/2015/04/02/draw-me-an-agile-manifesto/](http://blog.kaliop.com/en/blog/2015/04/02/draw-me-an-agile-manifesto/)\n"}},"excerpt":{"excerpt":"Originally posted on Linkedin"},"title":{"title":"Stop for a moment and visit the Agile Manifesto"},"date":"2016-10-01T17:24:58.394Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"The whole story started at a usual team meeting. There was a discussion about using Gartner’s toolkit for [Application Fitness and Value Review](https://www.gartner.com/doc/3021817/toolkit-application-fitness-value-review). There was not much enthusiasm filling out another excel sheet. Someone mentioned that it would be more fun to do it with an App. A few jokes went around if it can be done in a weekend for a bottle of wine, and then we just moved on.\n\n### Challenge accepted\n\nI thought it would be inspirational to my fellow architects if I could make this happen. Here is the story of a weekend and a [Coding night @Zmags](http://www.meetup.com/ZmagsCodeNight/).\n\n> Disclaimer — Gartner owns all the copyrights about this evaluation toolkit, therefor I think I cannot share it. For the same reason I cannot share the full source of the project. I have no money for lawyers.\n\n### The product\n\nIt is all about evaluating a list of applications against certain set of smart criteria with rating, than visualise the result on a chart. So there is a list of application, a questionnaire, a rating between 1 and 5, some smart algorithm, and a chart. **That’s it!**\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/4I8FirPYvYL8XvH709Lf9z/759593ef256e7f4ea299404294c72e40/0_LBUWEAaGVmgXa7NZ.png)\n\n<figcaption>Specification in 15&nbsp;minutes</figcaption>\n\n### Warning — Scope creep!\n\nThan I started thinking about if this app could be a SaaS product. Could it be that companies maintaining their application portofolio fitness here? Can Gartner offer this as a service? And than I just went amok on features. Added authentication, web interface, Import / export and API, payment. What could give it more added value? Let’s have a timemachine-like history.\n\nOh and lets add authentication, and registration so the app can be sold as SaaS. Let’s make a full-scale application portfolio management extension etc.\n\n> *STOP! This is a weekend project for fun!*\n\n### Speaking of timeframe\n\nI had a weekend plus a [coding meetup @Zmags](http://www.meetup.com/ZmagsCodeNight/) + commuting time. I made a total 6 hours at weekend (*Not bad with two small kids :)* ) + 6 hours at the meetup + 1 hour on the train. It was ca. 13 hours of pure coding fun.\n\n### The Research\n\nSo I had to find out how to make the app. Here you can see the process and the results in telegramm style:\n\n> *Google — Github — Cocoapods — Google — Stackoverflow — Google — Github — Stackoverflow, Cocoapods — Google — Google…plus I had some* [*experience*](https://babelfishapp.wordpress.com) *with iOS and Swift from earlier.*\n\n### The results\n\n*   [Infinite Scroll with custom UIPageViewController and swipe for filter data on tableview.](https://github.com/igroomgrim/Infinite-scroll-with-uipageviewcontroller) thx to [@igroomgrim](https://twitter.com/igroomgrim)\n*   [Star rating](https://github.com/shuhrat10/STRatingControl) thx to [@shuhrat10](https://github.com/shuhrat10)\n*   Charts\n\n### The Pods\n\n    use_frameworks!  \n    target 'gartner-application-fitness' do  \n      pod 'Alamofire',   \n      pod 'SwiftyJSON',  \n      pod 'STRatingControl'  \n      pod 'FontAwesome.swift'  \n      pod 'Charts'  \n    end\n\n### Coding\n\nYes, I clearly haven’t done any TDD or BDD on this. It was a pure “It should work on the first run” coding.\n\n### The Contribution\n\nI couldn’t find a star rating control that can work together with UITableCellView. No problem, lets find something close to and contribute. This is the best thing about Open Source!\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/5gZ3m149JJ3MldjmQh44re/8a71f6f01ce25787f3c7427a7235203e/1_kKCzW0CWg5CZ29hE9hqX0w.png)\n\n### The aftermath\n\nCoding is pure fun! I have demoed the app at the next team meeting. I’ve made a proof of concept. It is impressive how much can be done nowadays.\n"}},"excerpt":{"excerpt":"The whole story started at a usual team meeting. There was a discussion about using Gartner’s toolkit for Application Fitness and Value…"},"title":{"title":"A bottle of wine"},"date":"2016-09-24T22:10:42.344Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"![](//images.ctfassets.net/bz8w7lpo5q3h/5uadF2Gj2rcRI4sue8T7SZ/3e971d66dd90858085ab75d1dac7e0a1/1_jGqVxV7bQuiQagbvvhU4Nw.jpeg)\n\nAnd this is good news. You are focusing on the right thing: **Your team**. Your curiosity is the base for innovation, keep it up! I would like to **Thank you** all of you that filled out the [survey](http://timu.io/survey) about skills, teams and feelings. I have created this infographics below for summarise the results. *Enjoy*!\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/5R9m1u8hPXfNEqQggH08EU/a634b5f95743eff7767ce5a3fc909754/1_ogKFyYqfajMze-xyf__5Vg.png)\n\n*I am more confident now to put effort into* [*timu.io*](http://timu.io/) *and give it a try.*\n\n*Originally published on* [*Linkedin*](https://www.linkedin.com/pulse/you-curious-your-team-skills-have-zoltán-simon)\n"}},"excerpt":{"excerpt":"And this is good news. You are focusing on the right thing: Your team. Your curiosity is the base for innovation, keep it up! I would like…"},"title":{"title":"You are curious about your team and the skills they have."},"date":"2016-09-24T20:35:55.754Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"![](//images.ctfassets.net/bz8w7lpo5q3h/7lbXKbr91FTl1UVTlqeU6M/cb3453f1e39904c506e878189bc6ba0f/1_rKXjqBzdD7MWWb2WkevY0w.jpeg)\n\n<figcaption>Credit&nbsp;: <a href=\"http://deathtothestockphoto.com\" data-href=\"http://deathtothestockphoto.com\" class=\"markup--anchor markup--figure-anchor\" rel=\"noopener\" target=\"_blank\">http://deathtothestockphoto.com</a></figcaption>\n\nLifelong learning, continuous improvements. A lot of talk about cross-functional teams and the right mix of professionals. As a professional I have a long history with skill matrices, choosing the right track in my carrier, adopting new teams or understanding team dynamics. I would like to look into this from an engineering perspective. I am running a little research to prove or disprove a few of my assumptions.\n\nCan you help me with filling out this short survey:\n\n> [https://timu-io.typeform.com/to/slb6Wr](https://timu-io.typeform.com/to/slb6Wr)\n\nI will of course publish the results. Thank you for your time.\n\n*This post first appeared on* [*Linkedin*](https://www.linkedin.com/pulse/up-date-competence-profile-survey-zoltán-simon)\n"}},"excerpt":{"excerpt":"Lifelong learning, continuous improvements. A lot of talk about cross-functional teams and the right mix of professionals. As a…"},"title":{"title":"Up to date competences — the survey"},"date":"2016-09-09T20:55:31.043Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"![](//images.ctfassets.net/bz8w7lpo5q3h/35g2pkYTtTeMM0p6vWkQaR/6db8e6e59b8b97daeb456849218e2cfd/1_MktJviobRjQnhyvh8Tu12A.png)\n\n> …lint was the name originally given to a particular program that flagged some suspicious and non-portable constructs (likely to be bugs) in C language source code. The term is now applied generically to tools that flag suspicious usage in software written in any computer language… — [wikipedia](https://en.wikipedia.org/wiki/Lint_%28software%29)\n\nMy taste is on tooling is more about online tools than browser extensions these days. Especially when it comes to small things like text manipulation and generators.\n\nHere is a non-comprehensive list of online lint tools in various areas I found useful.\n\n#### Regular Expression\n\n*   Regular expression — [https://regex101.com/](https://regex101.com/)\n*   JSON — [https://jsonformatter.curiousconcept.com/](https://jsonformatter.curiousconcept.com/)\n*   YAMLlint [— http://yamllint.com/](http://yamllint.com/)\n*   CSSLint — [http://csslint.net/](http://csslint.net/)\n*   JSON Schema generator — [http://jsonschema.net](http://jsonschema.net/) — [http://jsonschemalint.com/draft4/](http://jsonschemalint.com/draft4/)\n*   Base64 encode/decode — [https://base64encode.org/](https://base64encode.org/)\n*   CSV lint — [http://csvlint.io/](http://csvlint.io/)\n*   +1 gitignore generator — [https://gitignore.io/](https://gitignore.io/)\n*   +1 Dev Tools Online! (xsd generator and a lot more) — [https://devutilsonline.com/](https://devutilsonline.com/)\n"}},"excerpt":null,"title":{"title":"Online toolkit for lint"},"date":"2015-11-12T06:52:26.000Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"That was a great moment i my life when I first got my hands on the glorious ZX-81! Turning this superior machine on, fighting with BASIC, using hours and\n\n![ZX81_concept_design](//images.ctfassets.net/bz8w7lpo5q3h/4SAlJjQyMp8rvCmYMpNqz5/a0e344b3e0bb4c983e26e89bd9f47bef/0_9nMABuCFHi87UMh8..jpg)\n\nhours than finally understand what does it mean *variable*, *loop*, *memory*, *address* was a joy. The continous stimulation and success gave me so much energy, I am still running on that boost.\n\nEvery time I am staring a new project or getting an assignment, I am still getting goosebumps like the first time.\n\n![](//images.ctfassets.net/bz8w7lpo5q3h/1WaSdeoaibqi50z8EWwpyZ/c314c88294252a88159bd347f4855fad/0_UXqHPjsQ-L-USzf_.png)\n\nThe biggest thing working with software is the fact that it is **soft** for me. You can turn your imagination into (digital)reality. You can see the results instantly and alter them just after that.\n\nYou are continuously reaching to the next achievement with success. You can try things without the fear of *breaking* anything.\n\nSo don’t hesitate to start coding something! Your success is guarantied. Or more importantly, give this opportunity to your kids!\n\nI am not the only one with these thoughts of course, here are some references about this topic:\n\n*   [Hour of Code](http://code.org/)\n*   [Kids should code: why ‘computational thinking’ needs to be taught in schools — The Guardien](http://www.theguardian.com/commentisfree/2014/dec/19/kids-should-code-why-computational-thinking-needs-to-be-taught-in-schools)\n*   [Codecademy](http://www.codecademy.com/learn)\n*   [Codie -A robotic toy that teaches kids the principles of coding](http://www.getcodie.com/)\n*   [Raspberry Pi is a low cost, credit-card sized computer](http://www.raspberrypi.org/)\n\n*Get hooked as I am!*\n\nimage credit: [http://en.wikipedia.org/wiki/ZX81](http://en.wikipedia.org/wiki/ZX81)\n"}},"excerpt":null,"title":{"title":"Got hooked — The glorious ZX-81!"},"date":"2015-03-11T21:23:00.000Z"}},{"node":{"content":{"childMarkdownRemark":{"rawMarkdownBody":"![](//images.ctfassets.net/bz8w7lpo5q3h/7DmUHxRtkOL2GTKf0zkTvX/1e60df4789c47f5d9a0df0c1e85e2adf/1_7so5nLHgRFuK0MXyhxlJig.jpeg)\n"}},"excerpt":null,"title":{"title":"Spacer"},"date":"2015-03-10T22:31:07.000Z"}}]}}}